REPORT ZTEST_CDS_COMBINED.

TYPES: BEGIN OF ty_field_info,
         fieldname TYPE string,
         datatype  TYPE string,
       END OF ty_field_info,
       tt_field_info TYPE TABLE OF ty_field_info,
       tt_string     TYPE TABLE OF string WITH DEFAULT KEY.

TYPES: BEGIN OF ty_date_range,
         from_date TYPE dats,
         to_date   TYPE dats,
       END OF ty_date_range.

TYPES: BEGIN OF ty_processing_config,
         mode        TYPE string,
         cds_name    TYPE string,
         file_prefix TYPE string,
         days        TYPE i,
       END OF ty_processing_config.

TYPES: BEGIN OF ty_export_result,
         success      TYPE abap_bool,
         filepath     TYPE string,
         record_count TYPE i,
         message      TYPE string,
       END OF ty_export_result.


SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.
  PARAMETERS: p_clrdt TYPE dats DEFAULT sy-datum OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE TEXT-002.
  PARAMETERS: r_open  TYPE abap_bool RADIOBUTTON GROUP grp1 DEFAULT 'X',
              r_clear TYPE abap_bool RADIOBUTTON GROUP grp1.
SELECTION-SCREEN END OF BLOCK b2.

SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE TEXT-003.
  PARAMETERS: p_days TYPE i DEFAULT 3 MODIF ID dy1,
              p_path TYPE string OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b3.


CLASS lcl_send_cds_file DEFINITION FINAL.
  PUBLIC SECTION.
    CLASS-METHODS:
      calculate_range
        IMPORTING
          iv_to_date      TYPE dats
          iv_days         TYPE i
        RETURNING
          VALUE(rs_range) TYPE ty_date_range,

      format_date_for_display
        IMPORTING
          iv_date             TYPE dats
        RETURNING
          VALUE(rv_formatted) TYPE string.
ENDCLASS.

CLASS lcl_send_cds_file IMPLEMENTATION.
  METHOD calculate_range.
    rs_range-to_date = iv_to_date.

    CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
      EXPORTING
        date      = iv_to_date
        days      = iv_days * -1
        months    = 0
        signum    = '+'
        years     = 0
      IMPORTING
        calc_date = rs_range-from_date.
  ENDMETHOD.

  METHOD format_date_for_display.
    rv_formatted = |{ iv_date DATE = USER }|.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_config_builder DEFINITION FINAL.
  PUBLIC SECTION.
    CLASS-METHODS:
      build_open_items_config
        IMPORTING
          iv_clearing_date TYPE dats
        RETURNING
          VALUE(rs_config) TYPE ty_processing_config,

      build_cleared_items_config
        IMPORTING
          iv_clearing_date TYPE dats
          iv_days          TYPE i
        RETURNING
          VALUE(rs_config) TYPE ty_processing_config.
ENDCLASS.

CLASS lcl_config_builder IMPLEMENTATION.
  METHOD build_open_items_config.
    rs_config = VALUE #(
      mode = 'OPEN'
      cds_name = 'ZC_SD_INV_OPEN_CLR_ITEM_EXP'
      file_prefix = 'open_items_export'
      days = 30
    ).
  ENDMETHOD.

  METHOD build_cleared_items_config.
    rs_config = VALUE #(
      mode = 'CLEARED'
      cds_name = 'ZI_SD_INV_OPEN_CLEARED_ITEMS'
      file_prefix = 'cleared_items_export'
      days = iv_days
    ).
  ENDMETHOD.
ENDCLASS.

CLASS lcl_data_fetcher DEFINITION FINAL.
  PUBLIC SECTION.
    CLASS-METHODS:
      fetch_open_items
        IMPORTING
          is_date_range  TYPE ty_date_range
        RETURNING
          VALUE(rr_data) TYPE REF TO data,

      fetch_cleared_items
        IMPORTING
          is_date_range  TYPE ty_date_range
        RETURNING
          VALUE(rr_data) TYPE REF TO data,

      create_data_structure
        IMPORTING
          iv_mode          TYPE string
        RETURNING
          VALUE(rr_struct) TYPE REF TO data.
ENDCLASS.

CLASS lcl_data_fetcher IMPLEMENTATION.
  METHOD fetch_open_items.
    DATA: lr_data_tab TYPE REF TO data.
    FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE.

    CREATE DATA lr_data_tab TYPE STANDARD TABLE OF zc_sd_inv_open_clr_item_exp.
    ASSIGN lr_data_tab->* TO <lt_data>.

    SELECT * FROM zc_sd_inv_open_clr_item_exp
      INTO TABLE <lt_data>
      WHERE postingdate BETWEEN is_date_range-from_date AND is_date_range-to_date
        AND clearingdate IS INITIAL.

    rr_data = lr_data_tab.
  ENDMETHOD.

  METHOD fetch_cleared_items.
    DATA: lr_data_tab TYPE REF TO data.
    FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE.

    CREATE DATA lr_data_tab TYPE STANDARD TABLE OF zi_sd_inv_open_cleared_items.
    ASSIGN lr_data_tab->* TO <lt_data>.

    DATA(lv_date) = is_date_range-to_date - p_days.

    SELECT * FROM zi_sd_inv_open_cleared_items
      INTO TABLE <lt_data>
      WHERE clearingdate BETWEEN is_date_range-from_date AND is_date_range-to_date.

    rr_data = lr_data_tab.
  ENDMETHOD.

  METHOD create_data_structure.
    CASE iv_mode.
      WHEN 'OPEN'.
        CREATE DATA rr_struct TYPE zc_sd_inv_open_clr_item_exp.
      WHEN 'CLEARED'.
        CREATE DATA rr_struct TYPE zi_sd_inv_open_cleared_items.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_csv_transformer DEFINITION FINAL.
  PUBLIC SECTION.
    CLASS-METHODS:
      transform_to_csv
        IMPORTING
          ir_data             TYPE REF TO data
        RETURNING
          VALUE(rt_csv_lines) TYPE tt_string,

      clean_field_value
        IMPORTING
          iv_value        TYPE string
        RETURNING
          VALUE(rv_clean) TYPE string.

  PRIVATE SECTION.
    CLASS-METHODS:
      create_header_line
        IMPORTING
          ir_structure     TYPE REF TO data
        RETURNING
          VALUE(rv_header) TYPE string,

      create_data_lines
        IMPORTING
          ir_data         TYPE REF TO data
        RETURNING
          VALUE(rt_lines) TYPE tt_string,

      structure_to_csv_line
        IMPORTING
          ir_structure   TYPE REF TO data
        RETURNING
          VALUE(rv_line) TYPE string.
ENDCLASS.

CLASS lcl_csv_transformer IMPLEMENTATION.
  METHOD transform_to_csv.
    DATA: lr_structure TYPE REF TO data.
    FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE,
                   <ls_data> TYPE any.

    ASSIGN ir_data->* TO <lt_data>.

    IF lines( <lt_data> ) = 0.
      RETURN.
    ENDIF.

    READ TABLE <lt_data> ASSIGNING <ls_data> INDEX 1.
    GET REFERENCE OF <ls_data> INTO lr_structure.

    APPEND create_header_line( lr_structure ) TO rt_csv_lines.

    APPEND LINES OF create_data_lines( ir_data ) TO rt_csv_lines.
  ENDMETHOD.

  METHOD create_header_line.
    DATA: lv_line         TYPE string,
          lv_first        TYPE abap_bool VALUE abap_true,
          lv_display_name TYPE string,
          lr_struct_descr TYPE REF TO cl_abap_structdescr,
          lt_components   TYPE cl_abap_structdescr=>component_table.
    FIELD-SYMBOLS: <ls_structure> TYPE any.

    ASSIGN ir_structure->* TO <ls_structure>.

    lr_struct_descr ?= cl_abap_typedescr=>describe_by_data( <ls_structure> ).
    lt_components = lr_struct_descr->get_components( ).

    LOOP AT lt_components INTO DATA(ls_component).
      IF lv_first = abap_false.
        lv_line = |{ lv_line };|.
      ENDIF.

      IF to_upper( ls_component-name ) = 'VBELN'.
        lv_display_name = 'Sales Document'.
      ELSE.
        lv_display_name = ls_component-name.
      ENDIF.

      lv_line = |{ lv_line }{ lv_display_name }|.
      lv_first = abap_false.
    ENDLOOP.

    rv_header = lv_line.

  ENDMETHOD.

  METHOD create_data_lines.
    FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE,
                   <ls_data> TYPE any.

    DATA : lr_structure TYPE REF TO data.

    ASSIGN ir_data->* TO <lt_data>.

    LOOP AT <lt_data> ASSIGNING <ls_data>.
      GET REFERENCE OF <ls_data> INTO lr_structure.
      APPEND structure_to_csv_line( lr_structure ) TO rt_lines.
    ENDLOOP.
  ENDMETHOD.

  METHOD structure_to_csv_line.
    DATA: lv_line  TYPE string,
          lv_first TYPE abap_bool VALUE abap_true,
          lv_value TYPE string.
    FIELD-SYMBOLS: <ls_structure> TYPE any,
                   <lv_field>     TYPE any.

    ASSIGN ir_structure->* TO <ls_structure>.

    DO.
      ASSIGN COMPONENT sy-index OF STRUCTURE <ls_structure> TO <lv_field>.
      IF sy-subrc <> 0.
        EXIT.
      ENDIF.

      lv_value = |{ <lv_field> }|.
      lv_value = clean_field_value( lv_value ).

      IF lv_first = abap_false.
        lv_line = |{ lv_line };|.
      ENDIF.

      lv_line = |{ lv_line }{ lv_value }|.
      lv_first = abap_false.
    ENDDO.

    rv_line = lv_line.
  ENDMETHOD.

  METHOD clean_field_value.
    rv_clean = iv_value.

    rv_clean = replace( val = rv_clean sub = ';' with = ',' occ = 0 ).
    rv_clean = replace( val = rv_clean sub = '"' with = '''' occ = 0 ).
    rv_clean = replace( val = rv_clean sub = cl_abap_char_utilities=>cr_lf with = ' ' occ = 0 ).
    rv_clean = replace( val = rv_clean sub = cl_abap_char_utilities=>newline with = ' ' occ = 0 ).
    rv_clean = replace( val = rv_clean sub = cl_abap_char_utilities=>horizontal_tab with = ' ' occ = 0 ).

    IF rv_clean CS ',' OR rv_clean CS ' '.
      rv_clean = |"{ rv_clean }"|.
    ENDIF.
  ENDMETHOD.
ENDCLASS.


CLASS lcl_file_exporter DEFINITION FINAL.
  PUBLIC SECTION.
    CLASS-METHODS:
      export_csv
        IMPORTING
          it_csv_lines     TYPE tt_string
          iv_path          TYPE string
          iv_prefix        TYPE string
        RETURNING
          VALUE(rs_result) TYPE ty_export_result.

  PRIVATE SECTION.
    CLASS-METHODS:
      generate_filename
        IMPORTING
          iv_prefix          TYPE string
        RETURNING
          VALUE(rv_filename) TYPE string,

      resolve_physical_path
        IMPORTING
          iv_logical_path         TYPE string
          iv_filename             TYPE string
        RETURNING
          VALUE(rv_physical_path) TYPE string,

      write_file
        IMPORTING
          it_lines         TYPE tt_string
          iv_filepath      TYPE string
        RETURNING
          VALUE(rs_result) TYPE ty_export_result.
ENDCLASS.

CLASS lcl_file_exporter IMPLEMENTATION.
  METHOD export_csv.
    DATA(lv_filename) = generate_filename( iv_prefix ).
    DATA(lv_physical_path) = resolve_physical_path(
      iv_logical_path = iv_path
      iv_filename     = lv_filename
    ).

    rs_result = write_file(
      it_lines    = it_csv_lines
      iv_filepath = lv_physical_path
    ).
    rs_result-filepath = lv_physical_path.
  ENDMETHOD.

  METHOD generate_filename.
    DATA(lv_timestamp) = |{ sy-datum }{ sy-uzeit }|.
    rv_filename = |{ iv_prefix }_{ lv_timestamp }.csv|.
  ENDMETHOD.

  METHOD resolve_physical_path.
    CALL FUNCTION 'FILE_GET_NAME'
      EXPORTING
        logical_filename = CONV fileintern( iv_logical_path )
        file_name        = iv_filename
      IMPORTING
        file_name        = rv_physical_path
      EXCEPTIONS
        file_not_found   = 1
        OTHERS           = 2.

    IF sy-subrc <> 0.
      rv_physical_path = |{ iv_logical_path }/{ iv_filename }|.
    ENDIF.
  ENDMETHOD.

  METHOD write_file.
    rs_result-record_count = lines( it_lines ) - 1. " Subtract header

    TRY.
        OPEN DATASET iv_filepath FOR OUTPUT IN TEXT MODE ENCODING UTF-8.

        LOOP AT it_lines INTO DATA(lv_line).
          TRANSFER lv_line TO iv_filepath.
        ENDLOOP.

        CLOSE DATASET iv_filepath.

        rs_result-success = abap_true.
        rs_result-message = |File exported successfully: { iv_filepath }|.

      CATCH cx_sy_file_open_mode.
        rs_result-success = abap_false.
        rs_result-message = |Error opening file: { iv_filepath }|.

      CATCH cx_sy_codepage_converter_init.
        rs_result-success = abap_false.
        rs_result-message = |Encoding error: { iv_filepath }|.

      CATCH cx_sy_conversion_codepage.
        rs_result-success = abap_false.
        rs_result-message = |Character conversion error: { iv_filepath }|.

      CATCH cx_sy_file_authority.
        rs_result-success = abap_false.
        rs_result-message = |No authorization for file: { iv_filepath }|.

      CATCH cx_root INTO DATA(lx_error).
        rs_result-success = abap_false.
        rs_result-message = |Unexpected error: { lx_error->get_text( ) }|.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_invoice_processor DEFINITION FINAL.
  PUBLIC SECTION.
    CLASS-METHODS:
      process_invoice_export
        IMPORTING
          iv_clearing_date TYPE dats
          iv_is_open_mode  TYPE abap_bool
          iv_days          TYPE i
          iv_export_path   TYPE string
        RETURNING
          VALUE(rs_result) TYPE ty_export_result.

  PRIVATE SECTION.
    CLASS-METHODS:
      validate_inputs
        IMPORTING
          iv_clearing_date TYPE dats
          iv_is_open_mode  TYPE abap_bool
          iv_days          TYPE i
          iv_export_path   TYPE string
        RETURNING
          VALUE(rv_valid)  TYPE abap_bool,

      get_data_by_mode
        IMPORTING
          is_config      TYPE ty_processing_config
          is_date_range  TYPE ty_date_range
        RETURNING
          VALUE(rr_data) TYPE REF TO data.
ENDCLASS.

CLASS lcl_invoice_processor IMPLEMENTATION.
  METHOD process_invoice_export.

    IF validate_inputs(
         iv_clearing_date = iv_clearing_date
         iv_is_open_mode = iv_is_open_mode
         iv_days = iv_days
         iv_export_path = iv_export_path
       ) = abap_false.
      rs_result-success = abap_false.
      rs_result-message = 'Input validation failed'.
      RETURN.
    ENDIF.

    DATA(ls_config) = COND ty_processing_config(
      WHEN iv_is_open_mode = abap_true
      THEN lcl_config_builder=>build_open_items_config( iv_clearing_date )
      ELSE lcl_config_builder=>build_cleared_items_config(
             iv_clearing_date = iv_clearing_date
             iv_days = iv_days
           )
    ).
    
    DATA(lr_send_cds_file) = lcl_send_cds_file=>calculate_range(
      iv_to_date = iv_clearing_date
      iv_days    = ls_config-days
    ).

    DATA(lr_data) = get_data_by_mode(
      is_config     = ls_config
      is_date_range = lr_send_cds_file
    ).

    DATA(lt_csv_lines) = lcl_csv_transformer=>transform_to_csv( lr_data ).

    rs_result = lcl_file_exporter=>export_csv(
      it_csv_lines = lt_csv_lines
      iv_path      = iv_export_path
      iv_prefix    = ls_config-file_prefix
    ).
  ENDMETHOD.

  METHOD validate_inputs.
    rv_valid = COND #(
      WHEN iv_clearing_date IS INITIAL THEN abap_false
      WHEN iv_export_path IS INITIAL THEN abap_false
      WHEN iv_is_open_mode = abap_false AND iv_days IS INITIAL THEN abap_false
      ELSE abap_true
    ).
  ENDMETHOD.

  METHOD get_data_by_mode.
    rr_data = COND #(
      WHEN is_config-mode = 'OPEN'
      THEN lcl_data_fetcher=>fetch_open_items( is_date_range )
      ELSE lcl_data_fetcher=>fetch_cleared_items( is_date_range )
    ).
  ENDMETHOD.
ENDCLASS.

CLASS lcl_screen_controller DEFINITION FINAL.
  PUBLIC SECTION.
    CLASS-METHODS:
      modify_screen_fields,
      display_result
        IMPORTING
          is_result TYPE ty_export_result.
ENDCLASS.

CLASS lcl_screen_controller IMPLEMENTATION.
  METHOD modify_screen_fields.
    LOOP AT SCREEN.
      CASE screen-group1.
        WHEN 'DY1'.
          screen-active = COND #( WHEN r_open = 'X' THEN 0 ELSE 1 ).
          MODIFY SCREEN.
      ENDCASE.
    ENDLOOP.
  ENDMETHOD.

  METHOD display_result.
    IF is_result-success = abap_true.
      WRITE: / 'SUCCESS:', is_result-message.
      WRITE: / 'Records exported:', is_result-record_count.
      MESSAGE  'Export completed' type  'S'.
    ELSE.
      WRITE: / 'ERROR:', is_result-message.
      MESSAGE 'Export failed:' type 'E'.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

AT SELECTION-SCREEN OUTPUT.
  lcl_screen_controller=>modify_screen_fields( ).

START-OF-SELECTION.
  DATA(ls_result) = lcl_invoice_processor=>process_invoice_export(
    iv_clearing_date = p_clrdt
    iv_is_open_mode  = r_open
    iv_days          = p_days
    iv_export_path   = p_path
  ).

  lcl_screen_controller=>display_result( ls_result ).